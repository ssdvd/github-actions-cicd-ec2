Sobre SSH:

para executarmos os comandos necessarios para que o nosso ambiente funcione de maneira
correta, iremos ter que utilizar um repo do marketplace para realizar a conexao 
e com isso executar o nosso script de preparacao de ambiente. Com o seguinte bloco de
cod:

        - name: executing remote ssh commands using password
          uses: appleboy/ssh-action@v1.0.0
          with:
            host: ${{ secrets.REMOTE_HOST }}
            username: ${{ secrets.REMOTE_USER }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            port: 22
            script: whoami

aqui nesse job, estamos nomeado com base no que ele ira fazer, que e utilizar os comandos
usando uma conexao ssh, em uses estamos dizendo que iremos trabalhar com um repo do
marketplace, e nas chaves estamos dando como valor, em host estamos dizendo em que instancia
iremos conectar ou seja o ip da nossa instancia, em username estamos dizendo o usuario da
instancia, em key estamos passando o conteudo do nosso par de chave gerado anteriormente
enquanto criavamos a instancia, na porta estamos referenciando a 22 que e a padrao para
acesso ssh, em script sera onde iremos informar o arquivo ou comando que iremos executar.

Script SSH:

e para inserirmos o script nesse bloco de cod:

script: |
              export HOST=
              export USER=
              export PASSWORD=
              export BDNAME=
              export PORT=

ao colocar o pipe apos os dois pontos da chave script, podemos inserir quantas linhas
de comandos quisermos e quanto for necessario para o preparo do ambiente. E para
criarmos as nossas variaveis de ambiente podemos utilizar o comando export e em 
seguida definimos um nome para essa variavel, como foi visto no bloco, feito isso
apos o sinal de igual, podemos dar o valor para essa variavel, e como estamos utilizando
o secrets do github, iremos criar um novo secrets para cada variavel e atribuir o valor,
feito isso iremos adicionar os secrets nos valores das variaveis, tornando assim o nosso
codigo mais seguro e confiavel.

Variaveis e go:

iremos adicionar no secrets o valor das nossas variaveis de ambiente do banco do app
em go, e para isso podemos inserir o seguinte:

            script: |
              export HOST= ${{ secrets.DBHOST }}
              export USER= ${{ secrets.DBUSER }}
              export PASSWORD= ${{ secrets.DBPASSWORD }}
              export BDNAME= ${{ secrets.DBNAME }}
              export PORT= ${{ secrets.PORT }}

aqui definimos os nomes das nossas secrets e alem disso cadastramos os valores das 
secrets em nosso repo do app, tornando o uso bem mais simples.

Aplicacao e porta:

devido uma funcao do go, ele detecta se houver uma variavel com o nome de PORT, o 
mesmo assume que sera a porta usada para o app, entao devemos mudar para o padrao
em que haviamos comecado, no caso:

              export PORT= ${{ secrets.DBPORT }}
              export PORT= 8000

Nao esquecer tambem de mudar diretamente no secrets dentro do repositorio. como nao 
e permitido alterar somente o nome do secrets, temos que excluir e criar uma nova 
com o nome e valor correto. e aproveitamos para fixar o valor da porta na variavel
PORT do qual o GO ira se aproveitar. E como essa porta nao e um tipo de informacao
confidencial, ela pode se exposta dentro do codigo sem nenhum problema.

e alteramos a variaveis de ambiente que sao pegas, dentro do arquivo db.go alterando
de " port=" + os.Getenv("PORT") para " port=" + os.Getenv("DBPORT").

tambem no Dockerfile, alteramos de ENV HOST=localhost PORT=5432 para
ENV HOST=localhost DBPORT=5432.

em go.yml alteramos tambem a variavel de ambiente que passamos no job test de
PORT: 5432 para DBPORT: 5432.

feito, nao sera retornado nenhum erro por conta dessa alteracao de porta.

Nessa aula, você aprendeu como:

Conectar via SSH no servidor para executar os comandos que precisamos para preparar 
o nosso ambiente e também para executar a aplicação.

Criar as variáveis de ambiente necessárias para a execução da nossa aplicação, 
mantendo seus valores em segredo e protegendo a aplicação e o banco de dados.

Alterar a aplicação para trocar o nome das variáveis de ambiente, já que a porta da 
aplicação estava conflitando com a porta do banco de dados.
